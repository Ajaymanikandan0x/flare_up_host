import '../../domain/entities/host_event_entite.dart';

class HostEventModel extends HostEventEntities{
 HostEventModel({
   required super.id,
   required super.title,
   required super.description,
   required super.category,
   required super.type,
   required super.hostId,
   required super.organizationId,
   required super.latitude,
   required super.longitude,
   required super.addressLine1,
   required super.city,
   required super.state,
   required super.country,
   required super.paymentRequired,
   required super.ticketPrice,
   required super.participantCapacity,
   required super.bannerImage,
   required super.promoVideo,
   required super.startDateTime,
   required super.endDateTime,
   required super.registrationDeadline,
   required super.createdAt,
   required super.updatedAt,
   required super.status,
   required super.statusRequest,
   required super.approvalStatus,
   required super.approvalComments,
   required super.approvalUpdatedAt,
   required super.keyParticipants,
   
});
 factory HostEventModel.fromJson(Map<String, dynamic> json) {
  return HostEventModel(
    id: json['id'],
    title: json['title'],
    description: json['description'],
    category: json['category'],
    type: json['type'],
    hostId: json['host_id'],
    organizationId: json['organization_id'],
    latitude: json['latitude'],
    longitude: json['longitude'],
    addressLine1: json['address_line_1'],
    city: json['city'],
    state: json['state'],
    country: json['country'],
    paymentRequired: json['payment_required'],
    ticketPrice: json['ticket_price'],
    participantCapacity: json['participant_capacity'],
    bannerImage: json['banner_image'],
    promoVideo: json['promo_video'],
    startDateTime: DateTime.parse(json['start_date_time']),
    endDateTime: DateTime.parse(json['end_date_time']),
    registrationDeadline: DateTime.parse(json['registration_deadline']),
    createdAt: DateTime.parse(json['created_at']),
    updatedAt: DateTime.parse(json['updated_at']),
    status: json['status'],
    statusRequest: json['status_request'],
    approvalStatus: json['approval_status'],
    approvalComments: json['approval_comments'],
    approvalUpdatedAt: DateTime.parse(json['approval_updated_at']),
    keyParticipants: List<String>.from(json['key_participants']),
  );
 }

 Map<String, dynamic> toJson() {
  return {
    'title': title,
    'description': description,
    'category': category,
    'type': type,
    'host_id': hostId,
    'organization_id': organizationId,
    'latitude': latitude,
    'longitude': longitude,
    'address_line_1': addressLine1,
    'city': city,
    'state': state,
    'country': country,
    'payment_required': paymentRequired,
    'ticket_price': ticketPrice,
    'participant_capacity': participantCapacity,
    'banner_image': bannerImage,
    'promo_video': promoVideo,
    'start_date_time': startDateTime.toIso8601String(),
    'end_date_time': endDateTime.toIso8601String(),
    'registration_deadline': registrationDeadline.toIso8601String(),
    'created_at': createdAt.toIso8601String(),
    'updated_at': updatedAt.toIso8601String(),
    'status': status,
    'status_request': statusRequest,
    'approval_status': approvalStatus,
    'approval_comments': approvalComments,
    'approval_updated_at': approvalUpdatedAt.toIso8601String(),
    'key_participants': keyParticipants,
  };
 }

 HostEventEntities toEntity() {
  return HostEventEntities(
    id: id,
    title: title,
    description: description,
    category: category,
    type: type,
    hostId: hostId,
    organizationId: organizationId,
    latitude: latitude,
    longitude: longitude,
    addressLine1: addressLine1,
    city: city,
    state: state,
    country: country,
    paymentRequired: paymentRequired,
    ticketPrice: ticketPrice,
    participantCapacity: participantCapacity,
    bannerImage: bannerImage,
    promoVideo: promoVideo,
    startDateTime: startDateTime,
    endDateTime: endDateTime,
    registrationDeadline: registrationDeadline,
    createdAt: createdAt,
    updatedAt: updatedAt,
    status: status,
    statusRequest: statusRequest,
    approvalStatus: approvalStatus,
    approvalComments: approvalComments,
    approvalUpdatedAt: approvalUpdatedAt,
    keyParticipants: keyParticipants,
  );
 }

}
